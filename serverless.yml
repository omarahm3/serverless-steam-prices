service: steamapp-details

provider:
  name: aws
  runtime: go1.x
  region: eu-central-1
  environment:
    TABLE_NAME: apps-${opt:stage, sls:stage}
    NEXT_PUBLIC_API: http://localhost:3000/dev/apps
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:*:*:*"

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-dynamodb-seed
  - serverless-s3-local
  - serverless-s3-sync

custom:
  s3:
    host: 0.0.0.0
    directory: /tmp/s3-steam-apps
    buckets: apps-${opt:stage, sls:stage}

  s3Sync:
    endpoint: http://localhost:4569
    buckets:
    - bucketName: _next
      localDir: ./frontend/out/_next
      acl: public-read
    - bucketName: apps-${opt:stage, sls:stage}
      localDir: ./frontend/out
      acl: public-read
      defaultContentType: text/html

  seed:
    apps:
      table: apps-${opt:stage, sls:stage}
      sources: 
        - ./seed/apps.json

  dynamodb:
    stages:
      - dev
    start:
      port: 8001
      inMemory: true
      migrate: true
      seed: true
    seed:
      apps:
        sources:
          - table: apps-${opt:stage, sls:stage}
            sources: [./seed/apps.json]

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  appDetails:
    handler: ./functions/get/get.go
    events:
      - http:
          path: apps
          method: get

resources:
  Resources:
    SteamAppsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'apps-${opt:stage, sls:stage}'
        AttributeDefinitions:
          - AttributeName: appid
            AttributeType: N
        KeySchema:
          - AttributeName: appid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        BucketName: apps-${opt:stage, sls:stage}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "apps-${opt:stage, sls:stage}"
                    },
                    "/*"
                  ]
                ]
